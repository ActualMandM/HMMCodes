Library "Resources" by "Hyper" 
{
    #include "Helpers" noemit
    
    #lib "Memory"
    
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    private static bool _isInitialised = false;
    
    private static string _currentResourceName = string.Empty;
    private static string _currentResourceType = string.Empty;
    
    public delegate string TResourceNotifyAction(string resourceName, string resourceType);
    private static List<TResourceNotifyAction> _resourceNotifyActions = new();
    
    public delegate long TResourceDataAction(string resourceName, string resourceType, long pResourceData);
    private static List<TResourceDataAction> _resourceDataActions = new();
    
    UNMANAGED_FUNCTION(long, GetResourceInfo, long pResourceName, long pResourceTypeName)
    {
        _currentResourceName = Marshal.PtrToStringAnsi((IntPtr)pResourceName);
        _currentResourceType = Marshal.PtrToStringAnsi((IntPtr)pResourceTypeName);
    
    	foreach (TResourceNotifyAction action in _resourceNotifyActions)
    		pResourceName = (long)Marshal.StringToHGlobalAnsi(action(_currentResourceName, _currentResourceType));
    	
        return pResourceName;
    }
    
    UNMANAGED_FUNCTION(long, GetResourceData, long pResourceData)
    {
    	foreach (TResourceDataAction action in _resourceDataActions)
    		pResourceData = action(_currentResourceName, _currentResourceType, pResourceData);
    
        return pResourceData;
    }
    
    private void Init()
    {
    	if (_isInitialised)
    		return;
    
        /* 0x140C70AE3 */
        long sigLoadResourceCaller = ScanSignature
        (
            "\xE8\xCC\xCC\xCC\xCC\x48\x85\xC0\x74\x22\x80\x78\x10\x00",
            "x????xxxxxxxxx"
        );
    
        if (sigLoadResourceCaller == 0)
            return;
    
        WriteAsmHook
        (
            $@"
                sub  rsp, 0xD0
                mov  rdi, r8
                mov  rbx, rdx
                mov  rsi, rcx
                mov  rcx, rdx
                mov  rdx, [rdi]
                mov  rax, {GET_UNMANAGED_FUNCTION_PTR(GetResourceInfo)}
                call rax
                mov  rdx, [rcx]
                mov  rbx, rdx
            ",
    
            /* 0x140DFFB0B */
            ScanSignature
            (
                "\x48\x81\xEC\xD0\x00\x00\x00\x49\x8B\xF8\x48\x8B\xDA",
                "xxxxxxxxxxxxx"
            ),
    
            HookBehavior.Replace
        );
    
        WriteAsmHook
        (
            $@"
                mov  rcx, rax
                mov  rax, {GET_UNMANAGED_FUNCTION_PTR(GetResourceData)}
                call rax
                lea  r11, qword ptr [rsp + 0xD8 + 0xFFFFFFFFFFFFFFF8]
                mov  rbx, qword ptr [r11 + 0x10]
                mov  rsi, qword ptr [r11 + 0x18]
    			mov  rsp, r11
            ",
            
            /* 0x140DFFBE6 */
            Memory.ReadCall(sigLoadResourceCaller) + 0xE6,
    
            HookBehavior.Replace
        );
    
    	// Allow loading open zone asset archive.
    	WriteNop
    	(
    		/* 0x1401C5BDC */
    		ScanSignature
    		(
    			"\x0F\x84\x36\x01\x00\x00\x48\x8D\x15",
    			"xxxxxxxxx"
    		),
    
    		6
    	);
    
    	// Allow loading Cyber Space asset archive.
    	WriteNop
    	(
    		/* 0x1401C5BC7 */
    		ScanSignature
    		(
    			"\x74\x0F\x48\x8D\x15\xCC\xCC\xCC\xCC\x48\x8B\xCF\xE8\xCC\xCC\xCC\xCC\x40\x38\x75\x68",
    			"xxxxx????xxxx????xxxx"
    		),
    
    		2
    	);
    
    	_isInitialised = true;
    }
    
    /*
    	Use notify actions for redirecting resources.
    	Redirected resources must already have their data present in memory loaded from their respective Packfiles.
        
    	Example;
    
    	string NotifyRedirectDashPanelResource(string resourceName, string resourceType)
    	{
    		if (resourceName == "cmn_obj_dashpanel")
    			return "cmnisl_obj_dashpanel";
    
    		return resourceName;
    	}
    
    	Resources.AddResourceNotifyAction(NotifyRedirectDashPanelResource);
    */
    public void AddResourceNotifyAction(TResourceNotifyAction action)
    {
    	Init();
    
    	if (_resourceNotifyActions.Contains(action))
    		return;
    
    	_resourceNotifyActions.Add(action);
    }
    
    public void RemoveResourceNotifyAction(TResourceNotifyAction action)
    {
    	Init();
    
    	if (!_resourceNotifyActions.Contains(action))
    		return;
    
    	_resourceNotifyActions.Remove(action);
    }
        
    /*
    	Use data actions for reading resource data.
        
    	Example;
    
    	SonicParameters.Root* pSonicParameters;
    
    	long GetSonicParametersPointer(string resourceName, string resourceType, long pResourceData)
    	{
    		if (resourceName == "player_common" && resourceType == "ResReflection")
    			pSonicParameters = (SonicParameters.Root*)(*(long*)(pResourceData + 0x60));
    
    		return pResourceData;
    	}
    
    	Resources.AddResourceDataAction(GetSonicParametersPointer);
    */
    public void AddResourceDataAction(TResourceDataAction action)
    {
    	Init();
    
    	if (_resourceDataActions.Contains(action))
    		return;
    
    	_resourceDataActions.Add(action);
    }
    
    public void RemoveResourceDataAction(TResourceDataAction action)
    {
    	Init();
    
    	if (!_resourceDataActions.Contains(action))
    		return;
    
    	_resourceDataActions.Remove(action);
    }
}


