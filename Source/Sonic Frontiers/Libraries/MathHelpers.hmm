Library "MathHelpers" by "Hyper" 
{
    using System.Collections.Generic;

    public T Clamp<T>(T value, T minValue, T maxValue) where T : IComparable<T>
    {
        if (value.CompareTo(minValue) < 0)
        {
            return minValue;
        }
        else if (value.CompareTo(maxValue) > 0)
        {
            return maxValue;
        }
        else
        {
            return value;
        }
    }

    public T FloatPercentToRange<T>(float value)
    {
        if (typeof(T) == typeof(sbyte))
        {
            return (T)(object)(byte)(value * (sbyte.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(byte))
        {
            return (T)(object)(byte)(value * (byte.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(short))
        {
            return (T)(object)(short)(value * (short.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(ushort))
        {
            return (T)(object)(ushort)(value * (ushort.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(int))
        {
            return (T)(object)(int)(value * (int.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(uint))
        {
            return (T)(object)(uint)(value * (uint.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(long))
        {
            return (T)(object)(long)(value * (long.MaxValue * 1.0f));
        }
        else if (typeof(T) == typeof(ulong))
        {
            return (T)(object)(ulong)(value * (ulong.MaxValue * 1.0f));
        }
        
        return default;
    }
    
    public float Lerp(float start, float end, float time)
    {
        return start + (end - start) * time;
    }
}


