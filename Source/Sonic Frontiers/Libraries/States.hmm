Library "States" by "Hyper"
{
    #include "Helpers" noemit

    #lib "Helpers"
    #lib "Memory"

    #import "Collections"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `app::player::PlayerStateParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct PlayerStateParameter
    {
        [FieldOffset(0x10)] public ObjectMoveArray<Memory.Pointer<StateParameter>> StateParameters;
    }

    /// <summary>
    /// A struct representation of `app::player::StateParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct StateParameter
    {
        VFUNCTION_PTR(StateParameter, 2, uint, GetNameHash)
    }

    /// <summary>
    /// A struct representation of `app::player::StateSpringJump::Parameter`.
    /// </summary>
    [Helpers.InternalName("StateSpringJump::Parameter"), StructLayout(LayoutKind.Explicit)]
    public struct StateSpringJumpParameter
    {
        [FieldOffset(0)] public StateParameter Base;

        [FieldOffset(0x50)] public int Flags;
    }

    /// <summary>
    /// A struct representation of `app::player::StateDoubleJump`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct StateDoubleJump
    {
        /// <summary>
        /// The amount of time the Drop Dash has been charged for.
        /// </summary>
        [FieldOffset(0xB4)] public float DropDashChargeTimer;

        /// <summary>
        /// Bit flags for the state of the A button.
        /// </summary>
        [FieldOffset(0xC4)] public byte InputFlags;
    }

    /// <summary>
    /// A struct representation of `app::player::StateRecoveryJump`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xC8)]
    public struct StateRecoveryJump
    {
        /// <summary>
        /// Determines whether the player is charging a Drop Dash.
        /// </summary>
        [FieldOffset(0xC4)] public bool IsDropDashCharge;
    }

    /// <summary>
    /// A struct representation of `app::player::StateTailsFly`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0xB8)]
    public struct StateTailsFly
    {
        /// <summary>
        /// The phase of this state.
        /// </summary>
        [FieldOffset(0xA8)] public PhaseType Phase;

        public enum PhaseType : int
        {
            Intro,
            Rise,
            Flying,
            Tired
        }
    }
}