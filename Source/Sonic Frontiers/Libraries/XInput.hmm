Library "XInput" by "Hyper" 
{
    #lib "MathHelpers"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [DllImport("xinput1_4.dll", EntryPoint = "XInputGetState")]
    public extern int XInputGetState(int dwUserIndex, ref State pState);
    
    [DllImport("xinput1_4.dll", EntryPoint = "XInputSetState")]
    public extern int XInputSetState(int dwUserIndex, ref Vibration pVibration);

    public const short XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE = 7849;
    public const short XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE = 8689;

    public static float LeftMotorSpeed = 0.0f;
    public static float RightMotorSpeed = 0.0f;

    [Flags]
    public enum Buttons : ushort
    {
        DPAD_UP        = 0x0001,
        DPAD_DOWN      = 0x0002,
        DPAD_LEFT      = 0x0004,
        DPAD_RIGHT     = 0x0008,
        START          = 0x0010,
        BACK           = 0x0020,
        LEFT_THUMB     = 0x0040,
        RIGHT_THUMB    = 0x0080,
        LEFT_SHOULDER  = 0x0100,
        RIGHT_SHOULDER = 0x0200,
        A              = 0x1000,
        B              = 0x2000,
        X              = 0x4000,
        Y              = 0x8000
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct State
    {
        public int dwPacketNumber;
        public Gamepad Gamepad;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Gamepad
    {
        public Buttons wButtons;
        public byte bLeftTrigger;
        public byte bRightTrigger;
        public short sThumbLX;
        public short sThumbLY;
        public short sThumbRX;
        public short sThumbRY;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Vibration
    {
        public ushort wLeftMotorSpeed;
        public ushort wRightMotorSpeed;

        public Vibration(ushort leftMotorSpeed, ushort rightMotorSpeed)
        {
            wLeftMotorSpeed = leftMotorSpeed;
            wRightMotorSpeed = rightMotorSpeed;

            LeftMotorSpeed = leftMotorSpeed / 65535.0f;
            RightMotorSpeed = rightMotorSpeed / 65535.0f;
        }

        public Vibration(float leftMotorSpeed, float rightMotorSpeed)
        {
            wLeftMotorSpeed = MathHelpers.FloatPercentToRange<ushort>(leftMotorSpeed);
            wRightMotorSpeed = MathHelpers.FloatPercentToRange<ushort>(rightMotorSpeed);

            LeftMotorSpeed = leftMotorSpeed;
            RightMotorSpeed = rightMotorSpeed;
        }

        public Vibration(ushort motorSpeed)
        {
            wLeftMotorSpeed = wRightMotorSpeed = motorSpeed;
            LeftMotorSpeed = RightMotorSpeed = motorSpeed / 65535.0f;
        }

        public Vibration(float motorSpeed)
        {
            wLeftMotorSpeed = wRightMotorSpeed = MathHelpers.FloatPercentToRange<ushort>(motorSpeed);
            LeftMotorSpeed = RightMotorSpeed = motorSpeed;
        }
    }

    public State? GetState()
    {
        var pState = new State();

        if (XInputGetState(0, ref pState) != 0)
            return null;

        return pState;
    }

    public void SetState(Vibration pVibration)
    {
        XInputSetState(0, ref pVibration);
    }

    public Vector2 GetAnalog(int analogIndex, bool testDeadzone = true)
    {
        var pState = GetState();

        if (pState == null)
            return Vector2.Zero;

        Vector2 v = Vector2.Zero;

        switch (analogIndex)
        {
            case 0:
                v = new Vector2(pState.Value.Gamepad.sThumbLX / 32767.0f, pState.Value.Gamepad.sThumbLY / 32767.0f);
                break;

            case 1:
                v = new Vector2(pState.Value.Gamepad.sThumbRX / 32767.0f, pState.Value.Gamepad.sThumbRY / 32767.0f);
                break;
        }

        if (testDeadzone)
        {
            v = IsAnalogNeutral(analogIndex)
                ? Vector2.Zero
                : v;
        }

        return v;
    }

    // Use Sonic.Input for keyboard parity!
    public bool IsButtonDown(Buttons buttons)
    {
        var pState = GetState();

        if (pState == null)
            return false;

        return (pState.Value.Gamepad.wButtons & buttons) != 0;
    }

    public float GetTrigger(int triggerIndex)
    {
        var pState = GetState();

        if (pState == null)
            return 0;

        switch (triggerIndex)
        {
            case 0:
                return pState.Value.Gamepad.bLeftTrigger / 255.0f;

            case 1:
                return pState.Value.Gamepad.bRightTrigger / 255.0f;
        }

        return 0;
    }

    public bool IsAnalogNeutral(int analogIndex)
    {
        var pState = GetState();

        if (pState == null)
            return true;

        switch (analogIndex)
        {
            case 0:
            {
                short x = pState.Value.Gamepad.sThumbLX;
                short y = pState.Value.Gamepad.sThumbLY;

                return x < XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE &&
                    x > -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE &&
                    y < XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE &&
                    y > -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE;
            }

            case 1:
            {
                short x = pState.Value.Gamepad.sThumbRX;
                short y = pState.Value.Gamepad.sThumbRY;

                return x < XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE &&
                    x > -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE &&
                    y < XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE &&
                    y > -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE;
            }
        }

        return true;
    }

    public void SetVibration(float value)
    {
        SetState(new Vibration(MathHelpers.FloatPercentToRange<ushort>(value)));
    }

    public void SetVibration(int motorIndex, float value)
    {
        switch (motorIndex)
        {
            case 0:
            {
                SetState(new Vibration(value, RightMotorSpeed));
                break;
            }

            case 1:
            {
                SetState(new Vibration(LeftMotorSpeed, value));
                break;
            }
        }
    }
}


